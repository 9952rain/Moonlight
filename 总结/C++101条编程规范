一.组织和策略问题(管理)
0.不要拘泥于小节
  规定需要规定的事，不按照自己的想法去编写程序，影响可读性；

1.在高警告级别干净利落的进行编译
  编写的程序在运行时候尽量不要存在任何警告，能规避尽量规避；
  
2.使用自动构建系统
  尽量使用完全自动化的操作，不要自己去实现已经无误的工具功能；
  
3.使用版本控制系统
  尽量每次功能都分为版本，有利于管理
  
4.在代码审查上投入
  要提高自己代码质量，要多阅读别人优秀代码和把自己的代码给别人阅读，一次一次改进自己的代码；
  
二.设计风格
5.一个实体应该只有一个紧凑的职责
  一次只解决一个问题，不要让一个实体去干很多事，容易混淆；
  
6.正确，简单和清晰第一
  代码结构尽量简单，便于维护和阅读；
  
7.编程中应该知道何时和如何考虑可伸缩性
  考虑数据将来可能会增大，设计时候应该尽量把算法时间复杂度和空间复杂度考虑最优，与数据爆炸带来的影响；
  
8.不要进行不成熟的优化
  局部优化可能带来许多问题，比如 代码结构局部改变，可读性会随之变差，考虑优化时候，尽量保证必须优化尽量不要破坏原结构；
  
9.不要进行不成熟的劣化
  不要做不必要的改进，尽管不会影响性能等；
  
10.尽量减少全局和共享数据
  数据共享会增加耦合度，降低维护性，尽量减少数据共享；
  
11.隐藏信息
  通常类的数据通过set与get改变，不要直接暴露自己的数据；
  
12.懂得何时和如何进行并发性编程
  进行多线程和多进程编程时候，应该考虑如何减少共享对象， 思考加锁等问题；
  
13.确保资源为对象所拥有，使用显式的RAII和智能指针
  分配资源时候要确保初始化与销毁，并且尽量不要用智能指针；
  
三.编程风格
